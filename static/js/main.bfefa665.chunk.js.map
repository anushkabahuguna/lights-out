{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAround","val","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","_this2","toConsumableArray","Array","nrows","map","ncols","i","j","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","Number","_coord$split$map2","slicedToArray","y","x","flipCell","win","every","row","value","setState","_this3","style","marginTop","fontSize","rowIndex","key","colItem","colIndex","coordinates","concat","src_Cell_0","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bfefa665.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    this.props.flipCellsAround(this.props.val);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows:5,\n    ncols:5,\n    chanceLightStartsOn:0.4\n  }\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = {\n      hasWon:false,\n      //since we are storing the state of each board\n      board:this.createBoard()\n    }\n    this.flipCellsAround  =this.flipCellsAround.bind(this);\n  }\n\n\n  createBoard() {\n    let board = [...Array(this.props.nrows)].map(()=>Array(this.props.ncols));       \n\n    for(let i=0;i<this.props.nrows;i++)\n    {\n      for(let j=0;j<this.props.ncols;j++)\n      {\n        board[i][j] = Math.random()<this.props.chanceLightStartsOn;\n      \n      }\n    }\n    // for(let i=0;i<this.props.nrows;i++)\n    // {\n    //   for(let j=0;j<this.props.ncols;j++)\n    //   {\n    //     board[i][j] =false;\n      \n    //   }\n    // }\n    // board[1][2]=true;\n    // board[0][2] =true;\n    // board[1][1] =true;\n    // board[1][3] =true;\n    // board[2][2] =true;\n\n    return board\n  }\n\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = [...this.state.board];\n    // this gives the row and column number\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    flipCell(y,x);\n    flipCell(y-1,x);\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n    flipCell(y+1,x);\n\n    //  determine is the game has been won\n    let win =board.every(row => row.every((value)=>value===false));\n    this.setState({board, hasWon:win});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    return(\n      <div className=\"Board\">\n        {\n          this.state.hasWon?\n          (\n            <div className=\"Board-headings\" style={{marginTop:'40%'}} >\n        <div className=\"Board-heading\">You</div>\n        <div className=\"Board-sub-heading\">Won!</div>\n        </div>\n          )\n          :\n          (\n           <div>\n               <div className=\"Board-headings\" style={{fontSize:'.6em'}}>\n                  <div className=\"Board-heading\">Lights</div>\n                  <div className=\"Board-sub-heading\">out</div>\n               </div>\n              \n            <table >\n              <tbody>\n                \n                {\n\n                  this.state.board.map((row,rowIndex)=>{\n                    return <tr key={rowIndex}>\n                      {\n                        row.map((colItem,colIndex)=>{\n                          let coordinates = `${rowIndex}-${colIndex}`;\n                          return <Cell key={coordinates} flipCellsAround = {this.flipCellsAround} isLit={colItem} val ={coordinates}></Cell>\n                        })\n                      }\n                    </tr>\n                  })\n\n                }\n                \n              </tbody>\n            </table>\n          </div> \n         \n          )\n        }\n        \n      </div>\n    );\n\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}